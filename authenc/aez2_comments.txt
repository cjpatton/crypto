Comments on AEZ2 spec

  Tweakable blockcipher instantiation
    
    Extract/expand produces the basis for the tweaks and the key schedule for 
    four-round AES (AES4). The tweakable blockcipher $E^{i,j}_K(X)$ uses a different
    ordering of the key schedule for each value of the input weak $i \in {0, 1, 
    2, 3}$. One could either preprocess these into four key schedules, or modify 
    the AES call to change its key schedule based on the value of $i$. Neither of
    these solutions are desirable ... it would be preferable to build the tweak into 
    the offset, as in XE,XEX and AEZv1. 

      EDIT: It seems that rijndaelEncryptRound() in rijndael-alg-fst.h gives
      us the functionality we need without modificaiton. I just had to #define 
      INTERMEDIATE_VALUE_KAT to get at it. Still, I prefer how it's done in
      the old verison ... 

      EDIT: To Make the specified key scheduling work requries two copies and 
      and a zero_block(), plust one block of state in E(). I would suggest we 
      XOR in a tweak as in AEZv1 and store Kshort in the state. Eating this 
      extra state seems preferrable to adding extra ops to the blockcipher. 


Comments on the document

  Sec 1.3, Figure 3: Lines 224-225

    Notation for computing $X \leftarrow X_1 \xor \cdots \xor X_m$ looks
    ambiguous to me. I would suggest $X \leftarrow X_1 \xor X'_1 \xor 
    \cdots \xor X_m \xor X'_m$. 

  Sec 1.1, page 3: Why nX = rev(mul(n, rev(X)))? It's claimed that this
  improves speed for little endian systems. 
